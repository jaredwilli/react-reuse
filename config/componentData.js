module.exports = [{"name":"DotIcon","description":"","props":{"size":{"type":{"name":"number"},"required":false,"description":"The size of the dot","defaultValue":{"value":"5","computed":false}},"fill":{"type":{"name":"string"},"required":false,"description":"The fill color for the dot","defaultValue":{"value":"'#959595'","computed":false}}},"code":"import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst DotIcon = props => (\n    <svg\n        xmlns=\"http://www.w3.org/2000/svg\"\n        width={props.size}\n        height={props.size}\n        viewBox=\"0 0 10 10\">\n        <circle\n            cx=\"963\"\n            cy=\"3070\"\n            r=\"5\"\n            fill={props.fill}\n            fillRule=\"evenodd\"\n            transform=\"translate(-958 -3065)\"\n        />\n    </svg>\n);\n\nDotIcon.propTypes = {\n    /** The size of the dot */\n    size: PropTypes.number,\n    /** The fill color for the dot */\n    fill: PropTypes.string\n};\n\nDotIcon.defaultProps = {\n    size: 5,\n    fill: '#959595'\n};\n\nexport default DotIcon;\n","examples":[{"name":"Example","description":"DotIcon example","code":"import React from 'react';\nimport DotIcon from 'react-reuse/DotIcon';\n\n/** DotIcon example */\n\nfunction Example() {\n    return (\n        <div>\n            <DotIcon />\n            <br />\n            <DotIcon size={10} />\n            <br />\n            <DotIcon size={15} fill=\"#29292a\" />\n            <br />\n            <DotIcon size={25} fill=\"red\" />\n            <br />\n            <DotIcon size={105} fill=\"#29292a\" />\n        </div>\n    );\n};\n\nexport default Example;\n"}]},{"name":"EyeIcon","description":"","code":"import React from 'react';\n\nconst EyeIcon = () => {\n    return (\n        <svg\n            width=\"16\"\n            height=\"16\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            viewBox=\"0 0 22 22\">\n            <g transform=\"matrix(.02146 0 0 .02146 1 1)\" fill=\"#4d4d4d\">\n                <path d=\"m466.07 161.53c-205.6 0-382.8 121.2-464.2 296.1-2.5 5.3-2.5 11.5 0 16.9 81.4 174.9 258.6 296.1 464.2 296.1 205.6 0 382.8-121.2 464.2-296.1 2.5-5.3 2.5-11.5 0-16.9-81.4-174.9-258.6-296.1-464.2-296.1m0 514.7c-116.1 0-210.1-94.1-210.1-210.1 0-116.1 94.1-210.1 210.1-210.1 116.1 0 210.1 94.1 210.1 210.1 0 116-94.1 210.1-210.1 210.1\" />\n                <circle cx=\"466.08\" cy=\"466.02\" r=\"134.5\" />\n            </g>\n        </svg>\n    );\n};\n\nexport default EyeIcon;\n","examples":[{"name":"Example","description":"Custom message","code":"import React from 'react';\nimport EyeIcon from 'react-reuse/EyeIcon';\n\n/** Custom message */\nfunction Example() {\n    return <EyeIcon />;\n};\n\nexport default Example;\n"}]},{"name":"Hello","description":"A basic example component description for Hello component","props":{"message":{"type":{"name":"string"},"required":false,"description":"Message to display","defaultValue":{"value":"'World'","computed":false}}},"code":"import React from 'react';\nimport PropTypes from 'prop-types';\n\n/** A basic example component description for Hello component */\nexport default function Hello() {\n    return (\n        <div>\n            Hello world\n        </div>\n    );\n};\n\nHello.propTypes = {\n    /** Message to display */\n    message: PropTypes.string\n};\n\nHello.defaultProps = {\n    message: 'World'\n};\n","examples":[{"name":"ExampleHello","description":"Custom message","code":"import React from 'react';\nimport Hello from 'react-reuse/Hello';\n\n/** Custom message */\nfunction ExampleHello() {\n    return <Hello message=\"Nice component guys!\" />;\n};\n\nexport default ExampleHello;\n"}]},{"name":"Label","description":"Label with required field display, htmlFor,  and block styling","props":{"htmlFor":{"type":{"name":"string"},"required":true,"description":"HTML ID for associated input"},"label":{"type":{"name":"string"},"required":true,"description":"Label text"},"required":{"type":{"name":"bool"},"required":false,"description":"Display asterisk after label if true"}},"code":"import React from 'react';\nimport PropTypes from 'prop-types';\n\n/** Label with required field display, htmlFor,  and block styling */\nconst Label = ({ htmlFor, label, required}) => {\n    return (\n        <label style={{ display: 'block' }} htmlFor={htmlFor}>\n            {label} {required && <span style={{ color: 'red' }}> *</span>}\n        </label>\n    );\n};\n\nLabel.propTypes = {\n    /** HTML ID for associated input */\n    htmlFor: PropTypes.string.isRequired,\n    /** Label text */\n    label: PropTypes.string.isRequired,\n    /** Display asterisk after label if true */\n    required: PropTypes.bool\n};\n\nexport default Label;\n","examples":[{"name":"ExampleOptional","description":"Custom message","code":"import React from 'react';\nimport Label from 'react-reuse/Label';\n\n/** Custom message */\nfunction ExampleOptional() {\n    return <Label htmlFor=\"test\" label=\"test\" />;\n};\n\nexport default ExampleOptional;\n"},{"name":"ExampleRequired","description":"Custom message","code":"import React from 'react';\nimport Label from 'react-reuse/Label';\n\n/** Custom message */\nfunction ExampleRequired() {\n    return <Label htmlFor=\"test\" label=\"test\" required />;\n};\n\nexport default ExampleRequired;\n"}]},{"name":"LikertScale","description":"","props":{"value":{"type":{"name":"object"},"required":true,"description":"The value of the chart where the dot should display"},"options":{"type":{"name":"array"},"required":true,"description":"The list of scale options for setting the values of the dot points"},"width":{"type":{"name":"number"},"required":false,"description":"The list of scale options for setting the values of the dot points","defaultValue":{"value":"300","computed":false}}},"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport DotIcon from '../DotIcon';\n\nimport './LikertScale.css';\n\nconst LikertScale = props => {\n    const valueIndex = props.options.indexOf(props.value.label[0]);\n    let valueArr = new Array(props.options.length);\n    const labelArrs = {\n        size: [\n            'Runs Small',\n            'True to Size',\n            'Runs Large'\n        ],\n        width: [\n            'Runs Narrow',\n            'True to Width',\n            'Runs Wide'\n        ]\n    };\n\n    for (var i = 0; i < valueArr.length; i++) {\n        if (i === 0) {\n            valueArr[i] = 0;\n        } else if (i === valueArr.length) {\n            valueArr[i] = 100;\n        } else {\n            if (i === (valueArr.length - 1) / 2) {\n            }\n\n            valueArr[i] = 100 / (valueArr.length - 1) * i\n        }\n    }\n\n\n    const dotStyle = {\n        left: `${valueArr[valueIndex] - (100/35)}%`\n    };\n\n    return (\n        <div className=\"likert-scale\">\n            <div className=\"dot-points\">\n                {valueArr.map((val, index) => {\n                    const label = labelArrs[props.value.dimensionLabel.toLowerCase()];\n\n                    return (\n                        <div key={index} className=\"small-dot\" style={{ left: `${val}%` }}>\n                            {([0,2,4].indexOf(index) !== -1) && <span>\n                                {label[[0,2,4].indexOf(index)]}</span>\n                            }\n                        </div>\n                    );\n                })}\n            </div>\n\n            <div className=\"dot\" style={dotStyle}></div>\n            <div className=\"line\" style={{ width: props.width }}></div>\n        </div>\n    );\n};\n\nLikertScale.propTypes = {\n    /** The value of the chart where the dot should display */\n    value: PropTypes.object.isRequired,\n\n    /** The list of scale options for setting the values of the dot points */\n    options: PropTypes.array.isRequired,\n\n    /** The list of scale options for setting the values of the dot points */\n    width: PropTypes.number\n};\n\nLikertScale.defaultProps = {\n    width: 300\n};\n\nexport default LikertScale;\n","examples":[{"name":"Example","description":"","code":"import React from 'react';\nimport LikertScale from 'react-reuse/LikertScale';\n\n/** Some example likert scale charts */\n\nconst values = [\n    {\n        type: 3,\n        dimensionId: 3,\n        dimensionLabel: 'Size',\n        label: ['Felt True to Size']\n    },\n    {\n        type: 3,\n        dimensionId: 3,\n        dimensionLabel: 'Size',\n        label: ['Felt Full Size Smaller']\n    },\n    {\n        type: 3,\n        dimensionId: 3,\n        dimensionLabel: 'Size',\n        label: ['Felt Half Size Larger']\n    },\n    {\n        type: 3,\n        dimensionId: 2,\n        dimensionLabel: 'Width',\n        label: ['Felt Slightly Narrow']\n    },\n    {\n        type: 3,\n        dimensionId: 2,\n        dimensionLabel: 'Width',\n        label: ['Felt Wide']\n    }\n];\n\n\n\nfunction Example() {\n    const SIZE_OPTIONS = [\n        'Felt Full Size Smaller',\n        'Felt Half Size Smaller',\n        'Felt True to Size',\n        'Felt Half Size Larger',\n        'Felt Full Size Larger'\n    ];\n\n    const WIDTH_OPTIONS = [\n        'Felt Narrow',\n        'Felt Slightly Narrow',\n        'Felt True to Width',\n        'Felt Slightly Wide',\n        'Felt Wide'\n    ];\n\n    return (\n        <div>\n            <LikertScale value={values[0]} options={SIZE_OPTIONS} />\n            <br />\n            <br />\n            <LikertScale value={values[1]} options={SIZE_OPTIONS} />\n            <br />\n            <br />\n            <LikertScale value={values[2]} options={SIZE_OPTIONS} />\n            <br />\n            <br />\n            <LikertScale value={values[3]} options={WIDTH_OPTIONS} />\n            <br />\n            <br />\n            <LikertScale value={values[4]} options={WIDTH_OPTIONS} />\n        </div>\n    );\n};\n\nexport default Example;\n"}]},{"name":"Pagination","description":"","props":{"items":{"type":{"name":"array"},"required":true,"description":"The array of items to paginate"},"onChangePage":{"type":{"name":"func"},"required":true,"description":"The function to call when clicking the pagination buttons to change page"},"initialPage":{"type":{"name":"number"},"required":false,"description":"The initial starting page","defaultValue":{"value":"1","computed":false}},"pageSize":{"type":{"name":"number"},"required":false,"description":"The number of items to show per page","defaultValue":{"value":"10","computed":false}}},"code":"import _ from 'lodash';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport './Pagination.css';\n\nclass Pagination extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            pager: {}\n        };\n    }\n\n    componentWillMount() {\n        // Set page if items array isn't empty\n        if (this.props.items && this.props.items.length) {\n            this.setPage(this.props.initialPage);\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        // Reset page if items array has changed\n        if ( this.props.items !== prevProps.items) {\n            this.setPage(this.props.initialPage);\n        }\n    }\n\n    setPage = page => {\n        const { items } = this.props;\n        let { pager } = this.state;\n\n        if (page < 1 || page > pager.totalPages) return;\n\n        // Get new pager object for specified page\n        pager = this.getPager(items.length, page);\n\n        // Get new page of items from items array\n        const pageOfItems = items.slice(pager.startIndex, pager.endIndex + 1);\n\n        this.setState({\n            pager: pager\n        });\n\n        this.props.onChangePage(pageOfItems);\n    }\n\n    getPager = (totalItems, currentPage = 1) => {\n        const totalPages = Math.ceil(totalItems / this.props.pageSize);\n        let startPage, endPage;\n\n        // TODO: Modify this so it works based on a prop numPagesToShow = 5\n        if (totalPages <= 10) {\n            // Show all if less than 10 pages\n            startPage = 1;\n            endPage = totalPages;\n        } else {\n            // Calculate start/end pages if more than 10\n            if (currentPage <= 6) {\n                startPage = 1;\n                endPage = 10;\n            } else if (currentPage + 4 >= totalPages) {\n                startPage = totalPages - 9;\n                endPage = totalPages;\n            } else {\n                startPage = currentPage - 5;\n                endPage = currentPage + 4;\n            }\n        }\n\n        // Calculate start and end item indexes\n        const startIndex = (currentPage - 1) * this.props.pageSize;\n        const endIndex = Math.min(startIndex + this.props.pageSize - 1, totalItems - 1);\n        const pages = _.range(startPage, endPage + 1);\n\n        return {\n            pageSize: this.props.pageSize,\n            totalPages,\n            currentPage,\n            totalItems,\n            startPage,\n            endPage,\n            startIndex,\n            endIndex,\n            pages\n        };\n    }\n\n    render() {\n        const { pager } = this.state;\n\n        // Don't show pagination if only 1 page\n        if (!pager.pages || pager.pages.length <= 1) {\n            return null\n        }\n\n        return (\n            <ul className=\"pagination\">\n                <li className={pager.currentPage === 1 ? 'disabled' : ''}>\n                    <a onClick={() => this.setPage(1)}>First</a>\n                </li>\n                <li className={pager.currentPage === 1 ? 'disabled' : ''}>\n                    <a onClick={() => this.setPage(pager.currentPage - 1)}>Previous</a>\n                </li>\n                {pager.pages.map((page, index) =>\n                    <li key={index} className={pager.currentPage === page ? 'active' : ''}>\n                        <a onClick={() => this.setPage(page)}>{page}</a>\n                    </li>\n                )}\n                <li className={pager.currentPage === pager.totalPages ? 'disabled' : ''}>\n                    <a onClick={() => this.setPage(pager.currentPage + 1)}>Next</a>\n                </li>\n                <li className={pager.currentPage === pager.totalPages ? 'disabled' : ''}>\n                    <a onClick={() => this.setPage(pager.totalPages)}>Last</a>\n                </li>\n            </ul>\n        );\n    }\n}\n\nPagination.propTypes = {\n    /** The array of items to paginate */\n    items: PropTypes.array.isRequired,\n    /** The function to call when clicking the pagination buttons to change page */\n    onChangePage: PropTypes.func.isRequired,\n    /** The initial starting page */\n    initialPage: PropTypes.number,\n    /** The number of items to show per page */\n    pageSize: PropTypes.number\n};\n\nPagination.defaultProps = {\n    initialPage: 1,\n    pageSize: 10\n};\n\nexport default Pagination;\n","examples":[{"name":"Example","description":"Example of pagination","code":"import _ from 'lodash';\nimport React from 'react';\nimport Pagination from 'react-reuse/Pagination';\n\n/** Example of pagination */\n\nfunction Example() {\n    const items = _.range(1, 151).map(i => { return { id: i, name: 'Item ' + i }; });\n\n    function onChangePage(pageOfItems) {\n        // this.setState({ pageOfItems: pageOfItems });\n    }\n\n    return (\n        <div>\n            {/* <List items={this.state.pageOfItems} */}\n            <Pagination items={items} onChangePage={onChangePage} />\n        </div>\n    );\n};\n\nexport default Example;\n"}]},{"name":"PasswordInput","description":"Password input with integrated label, quality tips, and show password toggle.","props":{"htmlId":{"type":{"name":"string"},"required":true,"description":"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing."},"name":{"type":{"name":"string"},"required":true,"description":"Input name. Recommend setting this to match object's property so a single change handler can be used by convention."},"value":{"type":{"name":"any"},"required":false,"description":"Password value"},"label":{"type":{"name":"string"},"required":false,"description":"Input label","defaultValue":{"value":"'Password'","computed":false}},"onChange":{"type":{"name":"func"},"required":true,"description":"Function called when password input value changes"},"maxLength":{"type":{"name":"number"},"required":false,"description":"Max password length accepted","defaultValue":{"value":"50","computed":false}},"placeholder":{"type":{"name":"string"},"required":false,"description":"Placeholder displayed when no password is entered"},"showVisibilityToggle":{"type":{"name":"bool"},"required":false,"description":"Set to true to show the toggle for displaying the currently entered password","defaultValue":{"value":"false","computed":false}},"quality":{"type":{"name":"number"},"required":false,"description":"Display password quality visually via ProgressBar, accepts a number between 0 and 100"},"error":{"type":{"name":"string"},"required":false,"description":"Validation error to display"}},"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport ProgressBar from '../ProgressBar';\nimport EyeIcon from '../EyeIcon';\nimport TextInput from '../TextInput';\n\n/** Password input with integrated label, quality tips, and show password toggle. */\nclass PasswordInput extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            showPassword: false\n        };\n    }\n\n    toggleShowPassword = event => {\n        this.setState(prevState => {\n            return {\n                showPassword: !prevState.showPassword\n            };\n        });\n    }\n\n    render() {\n        const { htmlId, value, label, error,onChange, placeholder, maxLength, showVisibilityToggle, quality, ...props } = this.props;\n        const { showPassword } = this.state;\n\n        return (\n            <TextInput\n                htmlId={htmlId}\n                type={showPassword ? 'text' : 'password'}\n                placeholder={placeholder}\n                value={value}\n                label={label}\n                maxLength={maxLength}\n                error={error}\n                onChange={onChange}\n                required\n                {...props}>\n                {showVisibilityToggle &&\n                    <a onClick={this.toggleShowPassword}\n                        style={{ marginLeft: 5 }}>\n                        <EyeIcon />\n                    </a>\n                }\n                {\n                    (value.length > 0 && quality) && <ProgressBar percent={quality} width={130} />\n                }\n            </TextInput>\n        )\n    }\n}\n\n\nPasswordInput.propTypes = {\n    /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n    htmlId: PropTypes.string.isRequired,\n\n    /** Input name. Recommend setting this to match object's property so a single change handler can be used by convention.*/\n    name: PropTypes.string.isRequired,\n\n    /** Password value */\n    value: PropTypes.any,\n\n    /** Input label */\n    label: PropTypes.string,\n\n    /** Function called when password input value changes */\n    onChange: PropTypes.func.isRequired,\n\n    /** Max password length accepted */\n    maxLength: PropTypes.number,\n\n    /** Placeholder displayed when no password is entered */\n    placeholder: PropTypes.string,\n\n    /** Set to true to show the toggle for displaying the currently entered password */\n    showVisibilityToggle: PropTypes.bool,\n\n    /** Display password quality visually via ProgressBar, accepts a number between 0 and 100 */\n    quality: PropTypes.number,\n\n    /** Validation error to display */\n    error: PropTypes.string\n};\n\nPasswordInput.defaultProps = {\n    maxLength: 50,\n    showVisibilityToggle: false,\n    label: 'Password'\n};\n\nexport default PasswordInput;\n","examples":[{"name":"ExampleAllFeatures","description":"All features enabled","code":"import React from 'react';\nimport PasswordInput from 'react-reuse/PasswordInput';\n\n/** All features enabled */\nclass ExampleAllFeatures extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            password: ''\n        };\n    }\n\n    getQuality() {\n        const length = this.state.password.length;\n        return length > 10 ? 100 : length * 10;\n    }\n\n    render() {\n        return (\n            <div>\n                <PasswordInput\n                    htmlId=\"password-input-example-all\"\n                    name=\"password\"\n                    placeholder=\"Enter password\"\n                    value={this.state.password}\n                    error=\"First name is required\"\n                    minLength={8}\n                    onChange={event => this.setState({ password: event.target.value })} \n                    quality={this.getQuality()}\n                    showVisibilityToggle\n                    {...this.props}\n                />\n            </div>\n        );\n    }\n};\n\nexport default ExampleAllFeatures;\n"}]},{"name":"ProgressBar","description":"","props":{"percent":{"type":{"name":"number"},"required":true,"description":"Percent of progress completed"},"width":{"type":{"name":"number"},"required":true,"description":"Bar width"},"height":{"type":{"name":"number"},"required":false,"description":"Bar height","defaultValue":{"value":"5","computed":false}}},"code":"import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nclass ProgressBar extends Component {\n    getColor = percent => {\n        if (this.props.percent === 100) { return 'green' }\n        return this.props.percent > 50\n            ? 'lightgreen'\n            : 'red';\n    }\n\n    getWidthAsPercentOfTotalWidth = () => {\n        return parseInt(this.props.width * (this.props.percent / 100), 10);\n    }\n\n    render() {\n        const { percent, width, height } = this.props;\n\n        return (\n            <div style={{ border: '1px solid #ccc', width: width }}>\n                <div style={{\n                    backgroundColor: this.getColor(percent),\n                    width: this.getWidthAsPercentOfTotalWidth(),\n                    height\n                }} />\n            </div>\n        );\n    }\n}\n\nProgressBar.propTypes = {\n    /** Percent of progress completed */\n    percent: PropTypes.number.isRequired,\n    /** Bar width */\n    width: PropTypes.number.isRequired,\n    /** Bar height */\n    height: PropTypes.number\n};\n\nProgressBar.defaultProps = {\n    height: 5\n};\n\nexport default ProgressBar;\n","examples":[{"name":"Example100Percent","description":"100% progress","code":"import React from 'react';\nimport ProgressBar from 'react-reuse/ProgressBar';\n\n/** 100% progress */\nfunction Example100Percent() {\n    return <ProgressBar percent={100} width={150} height={20} />;\n};\n\nexport default Example100Percent;\n"},{"name":"Example10Percent","description":"10% progress","code":"import React from 'react';\nimport ProgressBar from 'react-reuse/ProgressBar';\n\n/** 10% progress */\nfunction Example10Percent() {\n    return <ProgressBar percent={10} width={150} />;\n};\n\nexport default Example10Percent;\n"},{"name":"Example70Percent","description":"70% progress","code":"import React from 'react';\nimport ProgressBar from 'react-reuse/ProgressBar';\n\n/** 70% progress */\nfunction Example70Percent() {\n    return <ProgressBar percent={70} width={150} />;\n};\n\nexport default Example70Percent;\n"}]},{"name":"Rating","description":"Star Rating component that sets the selection on click and has hover animation","props":{"showAverage":{"type":{"name":"bool"},"required":false,"description":"Show the average rating value or not"},"totalRatings":{"type":{"name":"number"},"required":false,"description":"The total number of reviews that have included a rating","defaultValue":{"value":"null","computed":false}},"size":{"type":{"name":"number"},"required":false,"description":"The size of the stars in the rating component","defaultValue":{"value":"32","computed":false}},"scale":{"type":{"name":"number"},"required":false,"description":"The rating scale number for how many stars","defaultValue":{"value":"5","computed":false}},"rating":{"type":{"name":"number"},"required":false,"description":"The rating value to set initially if needed","defaultValue":{"value":"null","computed":false}}},"code":"import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport StarIcon from '../StarIcon';\n\nimport './Rating.css';\n\n/** Star Rating component that sets the selection on click and has hover animation */\nclass Rating extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      rating: this.props.rating || null,\n      tempRating: null\n    };\n  }\n\n  onClick = rating => {\n    if (this.props.rating) return; // disable\n\n    this.setState({\n      rating: rating,\n      tempRating: rating\n    });\n  };\n\n  onMouseOver = rating => {\n    if (this.props.rating) return; // disable\n\n    this.setState({\n      rating: rating,\n      tempRating: this.state.rating\n    });\n  };\n\n  onMouseOut = () => {\n    if (this.props.rating) return; // disable\n\n    this.setState({\n      rating: this.state.tempRating\n    });\n  };\n\n  render = () => {\n    const fill = '#29292A';\n    let stars = [];\n\n    for (let i = 1; i <= this.props.scale; i++) {\n      let isHalf = this.state.rating % 1 > 0;\n      let fillType = 'transparent';\n\n      if (this.state.rating !== null) {\n        if (this.state.rating >= i) {\n          fillType = 'full';\n        } else if (isHalf && Math.ceil(this.state.rating) === i) {\n          fillType = 'half';\n        }\n      }\n\n      stars.push(\n        <a\n          key={i}\n          className=\"star-link\"\n          style={(!this.props.rating) ? { cursor: 'pointer' } : {}}\n          onClick={() => this.onClick(i)}\n          onMouseOver={() => this.onMouseOver(i)}\n          onMouseOut={() => this.onMouseOut()}\n        >\n\n          <StarIcon fillType={fillType} fill={fill} size={this.props.size} />\n        </a>\n      );\n    }\n\n    return (\n      <div className=\"reviews-rating\">\n        <span className=\"star-rating\">\n          {stars}\n        </span>\n\n        {this.props.showAverage && <span className=\"star-average\">{this.props.rating}</span>}\n        {this.props.totalRatings && <span className=\"star-total\">{this.props.totalRatings} reviews</span>}\n\n      </div>\n    );\n  };\n}\n\nRating.propTypes = {\n  /** Show the average rating value or not */\n  showAverage: PropTypes.bool,\n\n  /** The total number of reviews that have included a rating */\n  totalRatings: PropTypes.number,\n\n  /** The size of the stars in the rating component */\n  size: PropTypes.number,\n\n  /** The rating scale number for how many stars */\n  scale: PropTypes.number,\n\n  /** The rating value to set initially if needed */\n  rating: PropTypes.number\n};\n\nRating.defaultProps = {\n  totalRatings: null,\n  rating: null,\n  size: 32,\n  scale: 5\n};\n\nexport default Rating;\n","examples":[{"name":"Example","description":"Various examples of star rating showing different props being set to output different style components.","code":"import React from 'react';\nimport Rating from 'react-reuse/Rating';\n\n/**\n * Various examples of star rating showing different props being set to output different style components.\n * */\n\nfunction Example() {\n    return (\n        <div>\n            <Rating />\n            <br />\n            <br />\n            <Rating size={20} />\n            <Rating rating={2} size={20} />\n            <Rating rating={4.2} size={20} />\n            <br />\n            <Rating />\n            <Rating rating={.8} />\n            <Rating rating={2} />\n            <Rating rating={2.3} />\n            <Rating rating={5} />\n            <br />\n            <Rating rating={4.2} totalRatings={203} showAverage />\n            <br />\n            <Rating scale={10} />\n            <Rating rating={4.9} scale={10} />\n            <Rating scale={10} size={40} />\n            <Rating rating={4.9} scale={10} size={40} />\n            <br />\n            <br />\n        </div>\n    );\n};\n\nexport default Example;\n"}]},{"name":"RegistrationForm","description":"Registration form with built-in validation.","props":{"confirmationMessage":{"type":{"name":"string"},"required":false,"description":"Message displayed upon successful submission","defaultValue":{"value":"'Thanks for registering'","computed":false}},"onSubmit":{"type":{"name":"func"},"required":true,"description":"Called when form is submitted"},"minPasswordLength":{"type":{"name":"number"},"required":false,"description":"Minimum password length","defaultValue":{"value":"8","computed":false}}},"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport TextInput from '../TextInput';\nimport PasswordInput from '../PasswordInput';\n\n/** Registration form with built-in validation. */\nclass RegistrationForm extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            user: {\n                email: '',\n                password: ''\n            },\n            errors: {},\n            submitted: false\n        };\n    }\n\n    onChange = event => {\n        const user = this.state.user;\n        user[event.target.name] = event.target.value;\n        this.setState({ user });\n    }\n\n    // Returns a number from 0 to 100 to represent password quality.\n    // For simplicity just returning % of minLength entered\n    // Could enhance with checks for number, special char, uniques etc.\n    passwordQuality(password) {\n        if (!password) return null;\n        if (password.length >= this.props.minPasswordLength) return 100;\n        const percentOfMinLength = parseInt(password.length / this.props.minPasswordLength * 100, 10);\n        return percentOfMinLength;\n    }\n\n    validate({ email, password }) {\n        const errors = {};\n        const { minPasswordLength } = this.props;\n\n        if (!email) errors.email = 'Email is required.';\n        if (password.length < minPasswordLength) errors.password = `Password must be ${minPasswordLength} characters long.`;\n\n        this.setState({ errors });\n\n        const formIsValid = Object.getOwnPropertyNames(errors).length === 0;\n        return formIsValid;\n    }\n\n    onSubmit = () => {\n        const { user } = this.state;\n        const formIsValid = this.validate(user);\n\n        if (formIsValid) {\n            this.props.onSubmit(user);\n            this.setState({ submitted: true });\n        }\n    }\n\n    render() {\n        const { errors, submitted } = this.state;\n        const { email, password } = this.state.user;\n\n        return (\n            submitted\n                ? <h2>{this.props.confirmationMessage}</h2>\n                : <div>\n                    <form>\n                        <TextInput\n                            htmlId=\"registration-form-email\"\n                            name=\"email\"\n                            onChange={this.onChange}\n                            label=\"Email\"\n                            value={email}\n                            error={errors.email}\n                            required />\n\n                        <PasswordInput\n                            htmlId=\"registration-form-password\"\n                            name=\"password\"\n                            value={password}\n                            onChange={this.onChange}\n                            quality={this.passwordQuality(password)}\n                            maxLength={50}\n                            error={errors.password}\n                            showVisibilityToggle />\n\n                        <input type=\"submit\" value=\"Register\"\n                            onClick={this.onSubmit} />\n                    </form>\n                </div>\n        );\n    };\n};\n\nRegistrationForm.propTypes = {\n    /** Message displayed upon successful submission */\n    confirmationMessage: PropTypes.string,\n\n    /** Called when form is submitted */\n    onSubmit: PropTypes.func.isRequired,\n\n    /** Minimum password length */\n    minPasswordLength: PropTypes.number\n};\n\nRegistrationForm.defaultProps = {\n    confirmationMessage: 'Thanks for registering',\n    minPasswordLength: 8\n};\n\nexport default RegistrationForm;\n","examples":[{"name":"ExampleRegistrationForm","description":"","code":"import React from 'react';\nimport RegistrationForm from 'react-reuse/RegistrationForm';\n\nexport default class ExampleRegistrationForm extends React.Component {\n    onSubmit = (user) => {\n        console.log(user);\n    }\n\n    render() {\n        return <RegistrationForm onSubmit={this.onSubmit} />\n    };\n}\n"}]},{"name":"StarIcon","description":"Star Icon component for the atom of a star rating component","props":{"size":{"type":{"name":"number"},"required":false,"description":"The size of the star","defaultValue":{"value":"32","computed":false}},"stroke":{"type":{"name":"string"},"required":false,"description":"The stroke color for the border of each star","defaultValue":{"value":"'#29292A'","computed":false}},"fill":{"type":{"name":"string"},"required":false,"description":"The fill color","defaultValue":{"value":"'transparent'","computed":false}},"fillType":{"type":{"name":"string"},"required":false,"description":"The fill type - blank for empty or half or full","defaultValue":{"value":"null","computed":false}}},"code":"import React from 'react';\nimport PropTypes from 'prop-types';\n\n/** Star Icon component for the atom of a star rating component */\n\nconst StarIcon = ({ fillType, fill, stroke, size }) => {\n    return (\n        <svg id=\"star-icon\"\n            className=\"star-icon\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n            width={size}\n            height={size}\n            viewBox=\"0 0 32 32\">\n            <path className=\"full\"\n                d=\"M15.25,22.08l-8,4.24,1.53-9L2.25,11l9-.12,4-9.36,4,9.36,9,.12-6.5,6.36,1.53,9Z\"\n                transform=\"translate(-1.04 -0.23)\"\n                fill={fillType === 'full' ? fill : 'transparent'}\n                stroke={stroke} />\n            <path className=\"half\"\n                d=\"M15.25,22.08l-8,4.24,1.53-9L2.25,11l9-.12,4-9.36Z\"\n                transform=\"translate(-1.04 -0.23)\"\n                fill={fillType === 'half' ? fill : 'transparent'}\n                stroke=\"transparent\"/>\n        </svg>\n    )\n};\n\nStarIcon.propTypes = {\n    /** The size of the star */\n    size: PropTypes.number,\n\n    /** The stroke color for the border of each star */\n    stroke: PropTypes.string,\n\n    /** The fill color */\n    fill: PropTypes.string,\n\n    /** The fill type - blank for empty or half or full  */\n    fillType: PropTypes.string\n};\n\nStarIcon.defaultProps = {\n    size: 32,\n    stroke: '#29292A',\n    fill: 'transparent',\n    fillType: null\n};\n\nexport default StarIcon;\n","examples":[{"name":"Example","description":"Some examples of setting the props for customizing the colors for each stars state.","code":"import React from 'react';\nimport StarIcon from 'react-reuse/StarIcon';\n\n/** Some examples of setting the props for customizing the colors for each stars state.  */\n\nfunction Example() {\n    return (\n        <div>\n            <StarIcon size={20} />\n            <StarIcon fillType=\"half\" fill=\"#29292A\" size={20} />\n            <StarIcon fillType=\"full\" fill=\"#29292A\" size={20} />\n            <br />\n            <StarIcon />\n            <StarIcon fillType=\"half\" fill=\"#29292A\" />\n            <StarIcon fillType=\"full\" fill=\"#29292A\" />\n            <br />\n            <StarIcon stroke=\"#980909\" />\n            <StarIcon fillType=\"half\" fill=\"#339933\" stroke=\"#980909\" />\n            <StarIcon fillType=\"full\" fill=\"#339933\" stroke=\"#980909\" />\n            <br />\n            <StarIcon stroke=\"magenta\" />\n            <StarIcon fillType=\"half\" fill=\"blue\" stroke=\"magenta\" />\n            <StarIcon fillType=\"full\" fill=\"blue\" stroke=\"magenta\" />\n        </div>\n    );\n};\n\nexport default Example;\n"}]},{"name":"TextInput","description":"Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker.","props":{"htmlId":{"type":{"name":"string"},"required":true,"description":"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing."},"name":{"type":{"name":"string"},"required":true,"description":"Input name. Recommend setting this to match object's property so a single change handler can be used."},"label":{"type":{"name":"string"},"required":true,"description":"Input label"},"type":{"type":{"name":"enum","value":[{"value":"'text'","computed":false},{"value":"'number'","computed":false},{"value":"'password'","computed":false}]},"required":false,"description":"Input type","defaultValue":{"value":"'text'","computed":false}},"required":{"type":{"name":"bool"},"required":false,"description":"Mark label with asterisk if set to true","defaultValue":{"value":"false","computed":false}},"onChange":{"type":{"name":"func"},"required":true,"description":"Function to call onChange"},"placeholder":{"type":{"name":"string"},"required":false,"description":"Placeholder to display when empty"},"value":{"type":{"name":"any"},"required":false,"description":"Value"},"error":{"type":{"name":"string"},"required":false,"description":"String to display when error occurs"},"children":{"type":{"name":"node"},"required":false,"description":"Child component to display next to the input"}},"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport Label from '../Label';\n\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\nfunction TextInput({ htmlId, name, label, type = 'text', required = false, onChange, placeholder, value, error, children, ...props }) {\n    return (\n        <div style={{ marginBottom: 16 }}>\n            <Label htmlFor={htmlId} label={label} required={required} />\n\n            <input\n                id={htmlId}\n                type={type}\n                name={name}\n                placeholder={placeholder}\n                value={value}\n                onChange={onChange}\n                style={error && { border: 'solid 1px red' }}\n                {...props} />\n                {children}\n\n            {error &&\n                <div style={{ color: 'red' }}>\n                    {error}\n                </div>\n            }\n        </div>\n    );\n};\n\nTextInput.propTypes = {\n    /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n    htmlId: PropTypes.string.isRequired,\n\n    /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\n    name: PropTypes.string.isRequired,\n\n    /** Input label */\n    label: PropTypes.string.isRequired,\n\n    /** Input type */\n    type: PropTypes.oneOf(['text', 'number', 'password']),\n\n    /** Mark label with asterisk if set to true */\n    required: PropTypes.bool,\n\n    /** Function to call onChange */\n    onChange: PropTypes.func.isRequired,\n\n    /** Placeholder to display when empty */\n    placeholder: PropTypes.string,\n\n    /** Value */\n    value: PropTypes.any,\n\n    /** String to display when error occurs */\n    error: PropTypes.string,\n\n    /** Child component to display next to the input */\n    children: PropTypes.node\n};\n\nexport default TextInput;\n","examples":[{"name":"ExampleError","description":"Required TextBox with Error","code":"import React from 'react';\nimport TextInput from 'react-reuse/TextInput';\n\n/** Required TextBox with Error */\nclass ExampleError extends React.Component {\n    render() {\n        return (\n            <TextInput\n                htmlId=\"example-error\"\n                label=\"First Name\"\n                name=\"firstname\"\n                onChange={() => alert('Changed!')}\n                error=\"First name is required\"\n                required\n            />\n        );\n    }\n};\n\nexport default ExampleError;\n"},{"name":"ExampleOptional","description":"Optional TextBox","code":"import React from 'react';\nimport TextInput from 'react-reuse/TextInput';\n\n/** Optional TextBox */\nclass ExampleOptional extends React.Component {\n    render() {\n        return (\n            <TextInput\n                htmlId=\"example-optional\"\n                label=\"First Name\"\n                name=\"firstname\"\n                onChange={() => alert('Changed!')}\n            />\n        );\n    }\n};\n\nexport default ExampleOptional;\n"}]},{"name":"TextInputBEM","description":"Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker.","props":{"htmlId":{"type":{"name":"string"},"required":true,"description":"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing."},"name":{"type":{"name":"string"},"required":true,"description":"Input name. Recommend setting this to match object's property so a single change handler can be used."},"label":{"type":{"name":"string"},"required":true,"description":"Input label"},"type":{"type":{"name":"enum","value":[{"value":"'text'","computed":false},{"value":"'number'","computed":false},{"value":"'password'","computed":false}]},"required":false,"description":"Input type","defaultValue":{"value":"'text'","computed":false}},"required":{"type":{"name":"bool"},"required":false,"description":"Mark label with asterisk if set to true","defaultValue":{"value":"false","computed":false}},"onChange":{"type":{"name":"func"},"required":true,"description":"Function to call onChange"},"placeholder":{"type":{"name":"string"},"required":false,"description":"Placeholder to display when empty"},"value":{"type":{"name":"any"},"required":false,"description":"Value"},"error":{"type":{"name":"string"},"required":false,"description":"String to display when error occurs"},"children":{"type":{"name":"node"},"required":false,"description":"Child component to display next to the input"}},"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport Label from '../Label';\n\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\nfunction TextInput({ htmlId, name, label, type = 'text', required = false, onChange, placeholder, value, error, children, ...props }) {\n\n    return (\n        <div className=\"text-input\">\n            <Label htmlFor={htmlId} label={label} required={required} />\n\n            <input\n                id={htmlId}\n                type={type}\n                name={name}\n                placeholder={placeholder}\n                value={value}\n                onChange={onChange}\n                className={error && 'textinput__input--state-error'}\n                {...props} />\n                {children}\n\n            {error &&\n                <div className=\"textinput__error\">\n                    {error}\n                </div>\n            }\n        </div>\n    );\n};\n\nTextInput.propTypes = {\n    /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n    htmlId: PropTypes.string.isRequired,\n\n    /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\n    name: PropTypes.string.isRequired,\n\n    /** Input label */\n    label: PropTypes.string.isRequired,\n\n    /** Input type */\n    type: PropTypes.oneOf(['text', 'number', 'password']),\n\n    /** Mark label with asterisk if set to true */\n    required: PropTypes.bool,\n\n    /** Function to call onChange */\n    onChange: PropTypes.func.isRequired,\n\n    /** Placeholder to display when empty */\n    placeholder: PropTypes.string,\n\n    /** Value */\n    value: PropTypes.any,\n\n    /** String to display when error occurs */\n    error: PropTypes.string,\n\n    /** Child component to display next to the input */\n    children: PropTypes.node\n};\n\nexport default TextInput;\n","examples":[{"name":"ExampleError","description":"Required TextBox with Error","code":"import React from 'react';\nimport TextInputBEM from 'react-reuse/TextInputBEM';\n\n/** Required TextBox with Error */\nclass ExampleError extends React.Component {\n    render() {\n        return (\n            <TextInputBEM\n                htmlId=\"example-error\"\n                label=\"First Name\"\n                name=\"firstname\"\n                onChange={() => alert('Changed!')}\n                error=\"First name is required\"\n                required\n            />\n        );\n    }\n};\n\nexport default ExampleError;\n"}]},{"name":"TextInputCSSModules","description":"Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker.","props":{"htmlId":{"type":{"name":"string"},"required":true,"description":"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing."},"name":{"type":{"name":"string"},"required":true,"description":"Input name. Recommend setting this to match object's property so a single change handler can be used."},"label":{"type":{"name":"string"},"required":true,"description":"Input label"},"type":{"type":{"name":"enum","value":[{"value":"'text'","computed":false},{"value":"'number'","computed":false},{"value":"'password'","computed":false}]},"required":false,"description":"Input type","defaultValue":{"value":"'text'","computed":false}},"required":{"type":{"name":"bool"},"required":false,"description":"Mark label with asterisk if set to true","defaultValue":{"value":"false","computed":false}},"onChange":{"type":{"name":"func"},"required":true,"description":"Function to call onChange"},"placeholder":{"type":{"name":"string"},"required":false,"description":"Placeholder to display when empty"},"value":{"type":{"name":"any"},"required":false,"description":"Value"},"error":{"type":{"name":"string"},"required":false,"description":"String to display when error occurs"},"children":{"type":{"name":"node"},"required":false,"description":"Child component to display next to the input"}},"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport Label from '../Label';\nimport styles from './textInput.css';\n\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\nfunction TextInput({ htmlId, name, label, type = 'text', required = false, onChange, placeholder, value, error, children, ...props }) {\n    return (\n        <div className={styles.fieldset}>\n            <Label htmlFor={htmlId} label={label} required={required} />\n\n            <input\n                id={htmlId}\n                type={type}\n                name={name}\n                placeholder={placeholder}\n                value={value}\n                onChange={onChange}\n                className={error && styles.inputError}\n                {...props} />\n                {children}\n\n            {error &&\n                <div className={styles.error}>\n                    {error}\n                </div>\n            }\n        </div>\n    );\n};\n\nTextInput.propTypes = {\n    /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n    htmlId: PropTypes.string.isRequired,\n\n    /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\n    name: PropTypes.string.isRequired,\n\n    /** Input label */\n    label: PropTypes.string.isRequired,\n\n    /** Input type */\n    type: PropTypes.oneOf(['text', 'number', 'password']),\n\n    /** Mark label with asterisk if set to true */\n    required: PropTypes.bool,\n\n    /** Function to call onChange */\n    onChange: PropTypes.func.isRequired,\n\n    /** Placeholder to display when empty */\n    placeholder: PropTypes.string,\n\n    /** Value */\n    value: PropTypes.any,\n\n    /** String to display when error occurs */\n    error: PropTypes.string,\n\n    /** Child component to display next to the input */\n    children: PropTypes.node\n};\n\nexport default TextInput;\n","examples":[{"name":"ExampleError","description":"Required TextBox with Error","code":"import React from 'react';\nimport TextInputCSSModules from 'react-reuse/TextInputCSSModules';\n\n/** Required TextBox with Error */\nclass ExampleError extends React.Component {\n    render() {\n        return (\n            <TextInputCSSModules\n                htmlId=\"example-error\"\n                label=\"First Name\"\n                name=\"firstname\"\n                onChange={() => alert('Changed!')}\n                error=\"First name is required\"\n                required\n            />\n        );\n    }\n};\n\nexport default ExampleError;\n"}]},{"name":"TextInputStyledComponents","description":"Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker.","props":{"htmlId":{"type":{"name":"string"},"required":true,"description":"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing."},"name":{"type":{"name":"string"},"required":true,"description":"Input name. Recommend setting this to match object's property so a single change handler can be used."},"label":{"type":{"name":"string"},"required":true,"description":"Input label"},"type":{"type":{"name":"enum","value":[{"value":"'text'","computed":false},{"value":"'number'","computed":false},{"value":"'password'","computed":false}]},"required":false,"description":"Input type","defaultValue":{"value":"'text'","computed":false}},"required":{"type":{"name":"bool"},"required":false,"description":"Mark label with asterisk if set to true","defaultValue":{"value":"false","computed":false}},"onChange":{"type":{"name":"func"},"required":true,"description":"Function to call onChange"},"placeholder":{"type":{"name":"string"},"required":false,"description":"Placeholder to display when empty"},"value":{"type":{"name":"any"},"required":false,"description":"Value"},"error":{"type":{"name":"string"},"required":false,"description":"String to display when error occurs"},"children":{"type":{"name":"node"},"required":false,"description":"Child component to display next to the input"}},"code":"import React from 'react';\nimport PropTypes from 'prop-types';\nimport Label from '../Label';\nimport styled from 'styled-components';\n\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\nfunction TextInput({ htmlId, name, label, type = 'text', required = false, onChange, placeholder, value, error, children, ...props }) {\n\n    const Fieldset = styled.div`\n        margin-bottom: 16px;\n    `;\n\n    const Error = styled.div`\n        color: red;\n    `;\n\n    const Input = styled.input`\n        border: ${error && '1px solid red'};\n        display: block;\n    `;\n\n    return (\n        <Fieldset>\n            <Label htmlFor={htmlId} label={label} required={required} />\n\n            <Input\n                id={htmlId}\n                type={type}\n                name={name}\n                placeholder={placeholder}\n                value={value}\n                onChange={onChange}\n                {...props} />\n                {children}\n\n            {error && <Error>{error}</Error>}\n        </Fieldset>\n    );\n};\n\nTextInput.propTypes = {\n    /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n    htmlId: PropTypes.string.isRequired,\n\n    /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\n    name: PropTypes.string.isRequired,\n\n    /** Input label */\n    label: PropTypes.string.isRequired,\n\n    /** Input type */\n    type: PropTypes.oneOf(['text', 'number', 'password']),\n\n    /** Mark label with asterisk if set to true */\n    required: PropTypes.bool,\n\n    /** Function to call onChange */\n    onChange: PropTypes.func.isRequired,\n\n    /** Placeholder to display when empty */\n    placeholder: PropTypes.string,\n\n    /** Value */\n    value: PropTypes.any,\n\n    /** String to display when error occurs */\n    error: PropTypes.string,\n\n    /** Child component to display next to the input */\n    children: PropTypes.node\n};\n\nexport default TextInput;\n","examples":[{"name":"ExampleError","description":"Required TextBox with Error","code":"import React from 'react';\nimport TextInputStyledComponents from 'react-reuse/TextInputStyledComponents';\n\n/** Required TextBox with Error */\nclass ExampleError extends React.Component {\n    render() {\n        return (\n            <TextInputStyledComponents\n                htmlId=\"example-error\"\n                label=\"First Name\"\n                name=\"firstname\"\n                onChange={() => alert('Changed!')}\n                error=\"First name is required\"\n                required\n            />\n        );\n    }\n};\n\nexport default ExampleError;\n"}]}]